{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#all-my-projects","title":"All my Projects","text":"<p>This website has all my projects that I have done. Please select one of the project links to see details.</p> <p>6 Degree of Freedom Arm EGR314 Project EGR 201 Project</p>","tags":["tag1","tag2"]},{"location":"6%20Degree%20of%20Freedom%20Arm/","title":"EGR 456 6 Degree of Freedom Arm","text":"","tags":["tag1","tag2"]},{"location":"6%20Degree%20of%20Freedom%20Arm/#6-degree-of-freedom-arm","title":"6 Degree of Freedom Arm","text":"<p>This is the page for my 6 degree of freedom arm I build for my EGR 456 final project. The initial purpose of the arm was to incorporate jacobian path-finding. The future plans for this robot is to add \"controllers\" so that I can independently control the direction of motion.</p> <p></p>","tags":["tag1","tag2"]},{"location":"6%20Degree%20of%20Freedom%20Arm/Code/","title":"Code","text":""},{"location":"6%20Degree%20of%20Freedom%20Arm/Code/#code","title":"Code","text":"<pre><code>from machine import Pin, PWM\nimport math\nfrom ulab import numpy as np\nfrom time import sleep_ms\n\n# --- Servo Setup ---\nservo1 = PWM(Pin(5), freq=50)\nservo2 = PWM(Pin(18), freq=50)\nservo3 = PWM(Pin(19), freq=50)\nservo4 = PWM(Pin(21), freq=50)\nservo5 = PWM(Pin(22), freq=50)\nservo6 = PWM(Pin(23), freq=50)\n\ndef angle_to_us_servo1(angle):\n    return 600 + (angle / 180) * (2500 - 600)\n\ndef angle_to_us_servo2(angle):\n    return 500 + ((180 - angle) / 270) * (2500 - 500)\n\ndef angle_to_us_servo3(angle):\n    return 500 + ((angle + 135) / 270) * (2500 - 500)\n\ndef angle_to_us_servo4(angle):\n    return 500 + ((angle + 90) / 180) * (2400 - 500)\n\ndef angle_to_us_servo5(angle):\n    return 500 + ((angle + 90) / 180) * (2380 - 500)\n\ndef angle_to_us_servo6(angle):\n    return 590 + ((angle + 90) / 180) * (2410 - 590)\n\ndef us_to_duty(us):\n    return int((us / 20000) * 65535)\n\ndef move_servo(servo, angle_fn, angle):\n    duty = us_to_duty(angle_fn(angle))\n    servo.duty_u16(duty)\n\n# --- Robot Arm Geometry ---\na = [9.5, 17.0, 17.0, 6.0, 6.0, 3.0]  # Arm segment lengths\n\n# --- Inverse Kinematics Function ---\ndef inverse_kinematics(target_position):\n    x, y, z = target_position\n\n    # --- Solve for the first three joints (theta1, theta2, theta3) ---\n    r = math.sqrt(x**2 + y**2)  # Planar distance (ignore z for now)\n    d = math.sqrt((r - a[3])**2 + z**2)\n\n    # Solving for theta1 (base rotation angle)\n    theta1 = math.atan2(y, x)\n\n    # Solve for theta2 (shoulder joint)\n    cos_theta2 = (d**2 - a[1]**2 - a[2]**2) / (2 * a[1] * a[2])\n    sin_theta2 = math.sqrt(1 - cos_theta2**2)\n    theta2 = math.atan2(sin_theta2, cos_theta2)\n\n    # Solve for theta3 (elbow joint)\n    theta3 = math.atan2(z, r - a[3])\n\n    # For simplicity, we'll assume no end-effector orientation (theta4, theta5, theta6 are zeros for now)\n    theta4 = 0\n    theta5 = 0\n    theta6 = 0\n\n    # Return calculated angles\n    return [math.degrees(theta1), math.degrees(theta2), math.degrees(theta3), theta4, theta5, theta6]\n\n# --- Robot Arm Kinematics Functions ---\ndef dh_matrix(theta, alpha, r, d):\n    theta = math.radians(theta)\n    alpha = math.radians(alpha)\n    return np.array([\n        [math.cos(theta), -math.sin(theta)*math.cos(alpha), math.sin(theta)*math.sin(alpha), r*math.cos(theta)],\n        [math.sin(theta),  math.cos(theta)*math.cos(alpha), -math.cos(theta)*math.sin(alpha), r*math.sin(theta)],\n        [0,               math.sin(alpha),                 math.cos(alpha),                 d],\n        [0,               0,                               0,                               1]\n    ])\n\ndef forward_kinematics(thetas):\n    alpha = [90, 0, 0, 90, 90, 0]\n    r = [0, a[1], a[2], 0, 0, 0]\n    d = [a[0], 0, 0, -a[3], a[4], a[5]]\n    T = np.eye(4)\n    for i in range(6):\n        T = np.dot(T, dh_matrix(thetas[i], alpha[i], r[i], d[i]))\n    return T\n\n# --- Jacobian Calculation ---\ndef compute_jacobian(thetas):\n    alpha = [90, 0, 0, 90, 90, 0]\n    r = [0, a[1], a[2], 0, 0, 0]\n    d = [a[0], 0, 0, -a[3], a[4], a[5]]\n\n    T = np.eye(4)\n    positions = [np.array([0.0, 0.0, 0.0])]\n    z_vectors = [np.array([0.0, 0.0, 1.0])]\n    for i in range(6):\n        T = np.dot(T, dh_matrix(thetas[i], alpha[i], r[i], d[i]))\n        positions.append(np.array([T[0, 3], T[1, 3], T[2, 3]]))\n        z_vectors.append(np.array([T[0, 2], T[1, 2], T[2, 2]]))\n\n    J = np.zeros((6, 6))\n    pe = positions[-1]\n    for i in range(6):\n        z = z_vectors[i]\n        pi = positions[i]\n        J[0:3, i] = np.cross(z, pe - pi)\n        J[3:6, i] = z\n    return J\n\n# --- Inverse Kinematics Step ---\ndef ik_velocity_step(thetas, v_linear, v_angular, step_size=0.5):\n    J = compute_jacobian(thetas)\n    try:\n        # Pseudo-inverse using (J\u1d40J)\u207b\u00b9J\u1d40\n        JT = J.T\n        JTJ = np.dot(JT, J)\n        JTJ_inv = np.linalg.inv(JTJ)\n        J_pinv = np.dot(JTJ_inv, JT)\n    except Exception:\n        print(\"Jacobian inversion failed!\")\n        return thetas\n\n    # Combine velocity vectors\n    v = np.array(list(v_linear) + list(v_angular))\n    delta_theta = np.dot(J_pinv, v)\n\n    new_thetas = []\n    for i in range(6):\n        theta = thetas[i] + math.degrees(step_size * delta_theta[i])\n\n        # Apply range limits\n        if i == 0:  # Servo 1: 0\u2013180\u00b0\n            if not (0 &lt;= theta &lt;= 180):\n                print(f\"Servo {i+1} angle {theta:.1f}\u00b0 out of range [0, 180]! Stopping.\")\n                return thetas\n        elif i == 1:  # Servo 2: -90\u2013180\u00b0\n            if not (-90 &lt;= theta &lt;= 180):\n                print(f\"Servo {i+1} angle {theta:.1f}\u00b0 out of range [-90, 180]! Stopping.\")\n                return thetas\n        elif i == 2:  # Servo 3: -135\u2013135\u00b0\n            if not (-135 &lt;= theta &lt;= 135):\n                print(f\"Servo {i+1} angle {theta:.1f}\u00b0 out of range [-135, 135]! Stopping.\")\n                return thetas\n        else:  # Servo 4\u20136: -90\u201390\u00b0\n            if not (-90 &lt;= theta &lt;= 90):\n                print(f\"Servo {i+1} angle {theta:.1f}\u00b0 out of range [-90, 90]! Stopping.\")\n                return thetas\n        new_thetas.append(theta)\n\n    return new_thetas\n\n\n# --- Main Loop ---\ndt_ms = 100\nstep_size = dt_ms / 1000  # = 0.1 seconds\n\n# Desired velocities (per second)\nv_linear_per_sec = np.array([5, -2, 1])       \nv_angular_per_sec = np.array([0, 0, 0])      \n\ntarget_position = np.array([10.0, 1.0, 15.0])  # Example target position for the end-effector\n\n# Get initial joint angles for the target position using inverse kinematics\nthetas = inverse_kinematics(target_position)#[0.0,0.0,0.0,0.0,0.0,0.0]\n\n# Print initial angles\nprint(\"Initial joint angles from inverse kinematics:\", thetas)\n\n# Move servos to initial position\nmove_servo(servo1, angle_to_us_servo1, thetas[0])\nmove_servo(servo2, angle_to_us_servo2, thetas[1])\nmove_servo(servo3, angle_to_us_servo3, thetas[2])\nmove_servo(servo4, angle_to_us_servo4, thetas[3])\nmove_servo(servo5, angle_to_us_servo5, thetas[4])\nmove_servo(servo6, angle_to_us_servo6, thetas[5])\n\nwhile True:\n    # Scale velocities for current time step\n    v_linear = v_linear_per_sec * step_size\n    v_angular = v_angular_per_sec * step_size\n\n    # Perform IK velocity step\n    new_thetas = ik_velocity_step(thetas, v_linear, v_angular, step_size)\n\n    # Stop if no change\n    if new_thetas == thetas:\n        print(\"Motion stopped due to servo limit or Jacobian issue.\")\n        break\n\n    thetas = new_thetas\n\n    # Move servos to new angles\n    move_servo(servo1, angle_to_us_servo1, thetas[0])\n    move_servo(servo2, angle_to_us_servo2, thetas[1])\n    move_servo(servo3, angle_to_us_servo3, thetas[2])\n    move_servo(servo4, angle_to_us_servo4, thetas[3])\n    move_servo(servo5, angle_to_us_servo5, thetas[4])\n    move_servo(servo6, angle_to_us_servo6, thetas[5])\n\n    # Print current end-effector position\n    T = forward_kinematics(thetas)\n    position = T[0:3, 3]\n    print(\"End-effector position:\", position)\n\n    sleep_ms(dt_ms)\n</code></pre>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/","title":"Component Selection","text":""},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#servos-1-4-6","title":"Servos 1, 4-6","text":"<p> Link</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#mg995","title":"MG995","text":"<p>This servo is used for the wrist joints on the arm and for the base servo. These are what we used throughout the class so the familiarity with them was the main reason for using them in addition to the ability to add the horns on them for much more secure fittings to the frame and joint end effectors.</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#servos-23","title":"Servos 2,3","text":"<p> Link</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#ms62","title":"MS62","text":"<p>For the shoulder joints I learned they needed a much higher torque rated servo to handle the heavy wrist I put on the end of it. The addition 90 degrees of motion that they provide over the other 180 degree servos greatly increase the range of motion.</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#structure","title":"Structure","text":"<p> Link</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#3d-model","title":"3D model","text":"<p>The main model of the arm is a 3D model I found and made some minor adjustments to after running into a few major problems. The joint attachments were not very secure as they mainly relied on just one attachment to the center of the servo.</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#joint-redesign","title":"Joint redesign","text":"<ul> <li>Part STL File</li> </ul> <p>To keep the join connections from stripping under any kind of load I redesigned them to be compatible with the horns by adding 4 additional holes in them for the screws. In addition to widening the connecting end to account for the extra holes. All the parts were 3D printed using PLA.</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#microchip","title":"Microchip","text":"<p> Link</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Component_Selection/#esp32","title":"ESP32","text":"<p>I was originally planning on using a PIC but unfortunately C is unable to do complex matrix math so I needed a microcontroller that could run Python. Once I switched to Python I no longer needed to do the long matrix multiplication by hand for use in C allowing me to focus on the additional functionality of the arm like forward and inverse kinematics in addition to the Jacobian path-finding it needed.</p>"},{"location":"6%20Degree%20of%20Freedom%20Arm/Math/","title":"Math","text":""},{"location":"6%20Degree%20of%20Freedom%20Arm/Math/#reference-frame","title":"Reference Frame","text":""},{"location":"6%20Degree%20of%20Freedom%20Arm/Math/#denavit-hartenberg-parameter-table","title":"Denavit-Hartenberg Parameter Table","text":""},{"location":"EGR%20201%20Project/","title":"EGR 201 AC Generator","text":"","tags":["tag1","tag2"]},{"location":"EGR%20201%20Project/#project-description","title":"Project Description","text":"<p>The purpose of the project was to make an interactive STEM display for a teachers classroom. The teacher we were paired up with wanted a display that could show the interaction between magnetism and electricity for her 2nd grade class. We ended up deciding on a hand powered AC generator that the kids could use to light up a lightbulb. The additional features we included outside of the main components being the generator itself is that for safety there is a slip gear built into the hand crank so that when the kids would spin it they would not get hurt from the handle spinning wildly but instead it would stop and let the chain keep spinning.</p>","tags":["tag1","tag2"]},{"location":"EGR%20314%20Team%20Project/","title":"EGR 314 Individual Board","text":"","tags":["tag1","tag2"]},{"location":"EGR%20314%20Team%20Project/#team-202-sensor-board","title":"Team 202 Sensor Board","text":"<p>This is the data sheet for EGR 314 Team 202's Sensor Board. The purpose of this board is to read the rotational velocity of the generator's motor as well as its voltage output via the hall effect sensor and internal ADC pin in the microcontroller. Team Page</p>","tags":["tag1","tag2"]},{"location":"EGR%20314%20Team%20Project/Code/","title":"Code/Resources","text":""},{"location":"EGR%20314%20Team%20Project/Code/#code","title":"Code","text":"<pre><code>#include \"mcc_generated_files/system/system.h\"\n\nuint16_t ms=0;\nfloat sec=0;\nuint8_t send = 0;\n#define Angle_Address_1 0x0E\n#define Angle_Address_2 0x0F\n#define Slave_Address 0x36\nuint8_t  b[2] = {0x0,0x0};\nuint8_t angleReg1 = Angle_Address_1;\nuint8_t angleReg2 = Angle_Address_2;\nuint8_t targetRPM = 0;\nuint8_t one = 1;\nuint8_t two = 2;\nint targetMode = 0;\nuint8_t angle = 0;\nfloat angleLast = 0.0f;\nint read = 0;\n\nvoid timer_callback(void)\n{\n    ms++;\n    if (ms&gt;500) \n    {\n        ms -= 500;\n        if(targetMode == 1)\n        {\n            send=2;\n            read++;\n            IO_RC2_Toggle();\n        }\n        if(targetMode == 0)\n        {\n            send++;\n            read++;\n            if(send == 2)\n            {\n                IO_RC2_Toggle();\n            }\n        }\n    }\n}\n\nuint8_t send_message(char * my_message){\n    printf(\"%s\",my_message);\n    return 1;\n}\n\n\n#define BUFSIZE 4\n#define MSGSIZE 64\n#define TEAMSIZE 5\n#define MSGTESTSIZE 64\n#define MSGTESTCHAR 0\n\nconst char my_id='c';\nconst char team_ids[TEAMSIZE+1]=\"abcdX\";\nchar buffer_in[BUFSIZE+1];\nchar message_in[MSGSIZE+1];\nchar message_out[MSGSIZE+1];\nchar c=0;\nunsigned int buffer_ii=0;\nunsigned int buffer_last_ii = 0;\nunsigned int message_ii=0;\nunsigned int message_last_ii=0;\nunsigned int message_incoming=0;\nint messageType2 = 2;\nint messageType1 = 1;\nuint8_t rpm = 0;\nuint16_t raw_angle = 0;\nfloat delta_deg = 0.0;\n\nvoid fill_string(char * mystring,char value,unsigned int size){\n    for (int ii=0;ii&lt;size;ii++){\n        mystring[ii]=value;\n    }\n}\n\nunsigned int find_char(char * mystring, char value,unsigned int size){\n    char c=0;\n    for (int ii=0;ii&lt;size;ii++){\n        c= mystring[ii];\n        if (c==value){\n            return 1;\n        }\n    }\n    return 0;\n}\n\nvoid handle_message(unsigned int ii){\n    message_in[ii] = 0;\n    char f = message_in[3];\n    if(f == 'c')\n    {\n\n        if(message_in[4] == 3)\n        {\n            targetRPM=message_in[5];\n            if(targetRPM&gt;0)\n            {\n                targetMode = 1;\n            }\n            if(targetRPM==0)\n            {\n                targetMode = 0;\n            }\n        }\n    }\n    else if(f == 'X')\n    {\n        send_message(message_in);\n        return;\n        //return broadcast\n    }\n    else\n    {\n        send_message(message_in);\n        return;\n    }\n}\n\n\nint main(void)\n{\n    buffer_in[BUFSIZE]=0;\n    message_in[MSGSIZE]=0;\n    fill_string(buffer_in,'a',BUFSIZE);\n    fill_string(message_in,'_',MSGSIZE);\n    message_in[MSGTESTSIZE]=MSGTESTCHAR;\n\n    uint16_t ms_last=0;\n    uint16_t sec_last=0;\n    uint16_t adc_value;\n    float voltage;\n    SYSTEM_Initialize();\n    INTERRUPT_GlobalInterruptEnable(); \n    INTERRUPT_PeripheralInterruptEnable(); \n    Timer1_Initialize();\n    Timer1_Start();\n\n    TMR1_OverflowCallbackRegister(timer_callback);\n\n    UART1_Initialize();\n    while(1)\n    {\n        if(EUSART1_IsRxReady())\n        {\n            c= EUSART1_Read();\n            buffer_in[buffer_ii]=c;\n            if (buffer_in[buffer_last_ii]=='A' &amp; buffer_in[buffer_ii]=='Z'){\n                fill_string(message_in,'_',MSGSIZE);\n                message_in[MSGTESTSIZE]=MSGTESTCHAR;\n                message_incoming=1;\n                message_in[0] = buffer_in[buffer_last_ii];\n                message_ii=1;\n            }\n            if (buffer_in[buffer_last_ii]=='Y' &amp; buffer_in[buffer_ii]=='B'){\n                message_incoming=0;\n                message_in[message_ii] = buffer_in[buffer_ii];\n                message_last_ii= message_ii;\n                message_ii = message_ii+1;\n                handle_message(message_ii);\n            }\n            if (message_incoming!=0){\n                message_in[message_ii] = buffer_in[buffer_ii];\n\n                if (message_ii==2){\n                    unsigned result = 0;\n                    char d=0;\n                    d = message_in[message_ii];\n                    result= find_char(team_ids,d,TEAMSIZE);\n                    if (result==0){\n                        //printf(\"AZbaPIC: sender not in teamYB\\n\");\n                        message_incoming = 0;\n                        message_ii=0;\n                    } else {\n                    }\n                }\n\n                if (message_ii==2){\n                    unsigned result = 0;\n                    char d=0;\n                    d = message_in[message_ii];\n                    if (d=='c'){\n                        //printf(\"AZbaPIC: sender is yourselfYB\\n\");\n                        message_incoming = 0;\n                        message_ii=0;\n                    } else {\n                    }\n                }\n\n                if (message_ii==3){\n                    unsigned result = 0;\n                    char d=0;\n                    d = message_in[message_ii];\n                    result= find_char(team_ids,d,TEAMSIZE);\n                    if (result==0){ \n                        //printf(\"AZbaPIC: receiver not in teamYB\\n\");\n                        message_incoming = 0;\n                        message_ii=0;\n                    } else {\n                    }\n                }\n\n                message_last_ii= message_ii;\n                message_ii = message_ii+1;\n                if (message_ii&lt;MSGTESTSIZE){} else{\n                    //printf(\"AZbaPIC: message too large. deletingYB\\n\");\n                    message_incoming=0;\n                    message_ii=0;\n                }\n            }\n            buffer_last_ii= buffer_ii;\n            buffer_ii = (buffer_ii+1)%BUFSIZE;\n        }\n        sec_last = sec;\n        ms_last = ms;\n        if (read == 1)\n        {\n            angleLast = angle;\n\n            i2c_WriteRead(Slave_Address, &amp;angleReg1, 1, b, 1);\n            __delay_ms(10); \n            i2c_WriteRead(Slave_Address, &amp;angleReg2, 1, &amp;b[1], 1);\n\n            uint16_t raw_angle = ((b[0] &amp; 0x0F) &lt;&lt; 8) | b[1];\n            angle = ((float)raw_angle * 360.0f) / 4096.0f;\n\n            // Handle angle wraparound\n            if (angle - angleLast &gt; 180.0f) {\n                delta_deg = angle - 360.0f - angleLast;\n            } else if (angle - angleLast &lt; -180.0f) {\n                delta_deg = 360.0f + angle - angleLast;\n            } else {\n                delta_deg = angle - angleLast;\n            }\n\n            // Check if the angle change is too small for RPM calculation\n            if (delta_deg &lt; 0.1f &amp;&amp; delta_deg &gt; -0.1f) {\n                rpm = 0;  // Set RPM to 0 if the change is too small\n            } else {\n                rpm = (delta_deg / 360.0f) * 60.0f;\n            }\n\n            // Clamp RPM to uint8_t range [0, 255]\n            if (rpm &lt; 0) {\n                rpm = 0;  // Clamp to 0 if RPM is negative\n            }\n            if (rpm &gt; 255) {\n                rpm = 255;  // Clamp to 255 if RPM is greater than 255\n            }\n\n            // Cast to uint8_t\n            rpm = (uint8_t)rpm;\n\n            read = 0;\n        }\n        if(send == 2)\n        {\n            printf(\"AZcX\");\n            __delay_ms(5);\n            EUSART1_Write(messageType2);\n            __delay_ms(5);\n            EUSART1_Write(rpm);\n            __delay_ms(5);\n            printf(\"YB\");\n            __delay_ms(5);\n\n            if(targetMode == 1)\n            {\n                if(rpm&lt;targetRPM)\n                {\n                    printf(\"AZcX\");\n                    __delay_ms(5);\n                    EUSART1_Write(messageType1);\n                    __delay_ms(5);\n                    EUSART1_Write(one);\n                    __delay_ms(5);\n                    printf(\"YB\");\n                    __delay_ms(5);\n                }\n                if(rpm&gt;targetRPM)\n                {\n                    printf(\"AZcX\");\n                    __delay_ms(5);\n                    EUSART1_Write(messageType1);\n                    __delay_ms(5);\n                    EUSART1_Write(two);\n                    __delay_ms(5);\n                    printf(\"YB\");\n                    __delay_ms(5);\n                }\n            }\n            send = 0;\n        }\n    }\n}\n</code></pre> <ul> <li>MPLabX Files</li> </ul>"},{"location":"EGR%20314%20Team%20Project/Component_Selection/","title":"Component Selection","text":""},{"location":"EGR%20314%20Team%20Project/Component_Selection/#hall-effect-sensor","title":"Hall Effect Sensor","text":"Model Pros Cons AS5600-ASOM $4.54 Link <ul><li>Used in Class</li><li>Programmable angle change</li><li>Uses I2C Communication</li><li>3.3V Operating Voltage</li></ul> <ul><li>Arduino Library</li><li>Cheap</li></ul> MLX90316KDC $5.52 Link <ul><li>Tri Axis Measurement</li><li>Uses I2C Communication</li></ul> <ul><li>4.5-5.5V Operating Voltage</li><li>Library for Arduino</li><li>Much more expensive</li></ul> AS5048B $7.46 Link <ul><li>0.05 Degree Measurement</li><li>Uses I2C Communication</li><li>3.3V Operating Voltage</li></ul> <ul><li>Few Extra Pins</li><li>No Library</li><li>Much more expensive</li></ul>"},{"location":"EGR%20314%20Team%20Project/Component_Selection/#selected-component","title":"Selected Component","text":"<p>Choice: Option 1: AS5600 Rationale: The reason for choosing this Hall Effect sensor is due to the familiarity of use. In addition, as we are just using it as a way to measure motor rotational speed we do not need one as accurate or expensive in favor of a less accurate cheaper option. The lack of a usable library means more digging into the data sheet for needed information but the Arduino libraries can help with example code.</p>"},{"location":"EGR%20314%20Team%20Project/Component_Selection/#switching-regulator","title":"Switching Regulator","text":"Model Pros Cons LM2575D2T $3.32 Link <ul><li>Used in Class</li><li>Few extra components</li><li>3.3V Output Voltage</li></ul> <ul><li>1A current output</li><li>Expensive</li></ul> TLV61046ADBVR $1.09 Link <ul><li>Cheap</li><li>Few extra components</li><li>3.3V output</li></ul> <ul><li>5.5V Max input</li><li>1A current output</li></ul> AP63203WU-7 $1.38 Link <ul><li>Cheap</li><li>2A current output</li><li>3.3V output</li></ul> <ul><li>lots of extra components</li><li>fast switching frequency making more noise</li></ul>"},{"location":"EGR%20314%20Team%20Project/Component_Selection/#selected-component_1","title":"Selected Component","text":"<p>Choice: Option 1: LM2575D2T Rationale: The reason for choosing this switching regulator is due to the low amount of external components and constant 1A current output as the rest of the system does not need more than \"\"mA.</p>"},{"location":"EGR%20314%20Team%20Project/Component_Selection/#simple-needed-components","title":"Simple Needed Components","text":"Component Specs Resistor <ul><li>10k Link</li><li>1k Link</li><li>330 Link</li><ul> Capacitor <ul><li>100nF Link</li><li>100uF Link</li><li>330uF Link</li><ul> Diode <ul><li>600mV @ 1A Link</li><ul> Inductor <ul><li>220uH Link</li><ul> LED <ul><li>150mA Link</li><ul> Fuse <ul><li>500mA Ih/ 1A It Link</li><li>100mA Ih/ 250mA It Link</li><ul> Simple AC Motor Non-Driven, position measured by sensor Link"},{"location":"EGR%20314%20Team%20Project/Component_Selection/#final-components","title":"Final Components","text":"<p>All of the components that were chosen were selected for they're familiarity and ease of use. This allowed for most of the trouble shooting time to be spend on code and messaging as opposed to making sure each part worked the way it was supposed to. Each part was selected around the needed requirements of the class.</p>"},{"location":"EGR%20314%20Team%20Project/Component_Selection/#power-budget","title":"Power Budget","text":""},{"location":"EGR%20314%20Team%20Project/Component_Selection/#final-power","title":"Final Power","text":"<p>As my power budget shows the whole system, even when running everything at full power, requires very little to operate. This lets the board be powered primarily by the team as what excess power they provide is plenty for my board to operate.</p>"},{"location":"EGR%20314%20Team%20Project/Schematic/","title":"Schematic","text":""},{"location":"EGR%20314%20Team%20Project/Schematic/#schematic","title":"Schematic","text":""},{"location":"EGR%20314%20Team%20Project/Schematic/#schematic-design","title":"Schematic Design","text":"<p>The main functionality of this board is reading the hall effect sensor, processing the information, and sending it to the rest of the team. The sensor communicates via I2C so all lines utilizing that communication have pull up resistors to help reset them. The switching regulator provides a constant 3.3V to the whole board which all components need to operate. It gets the main power either from the barrel jack or from the team via the header which can be swapped to via the jumper. The ICSP is there to make changes to code as needed if any bugs or problems arise. Since the board only needed to read in the sensor and send and receive information, the design was kept rather simplistic to reduce the cost and amount of trouble points where things could go wrong.</p> <ul> <li>Schemtaic Folder</li> </ul>"},{"location":"EGR%20314%20Team%20Project/Schematic/#pcb","title":"PCB","text":"<ul> <li>PCB Folder</li> </ul>"},{"location":"EGR%20314%20Team%20Project/Schematic/#assembled-board","title":"Assembled Board","text":""},{"location":"EGR%20314%20Team%20Project/Schematic/#version-20","title":"Version 2.0","text":"<p>Most of the improvements I would make to the board would be mainly spacing issues on the PCB layout. The placement of my ICSP pins had an annoying issue where I could not have it plugged in while the 8-pin ribbon cable was plugged in. Aside from that, adding some more GPIO pins the can be used and added to if need be would have helped, both for debugging purposes and for future use of the board if I wanted to expand the functionality of it. Other than that there really is no changes I would have made to the design or board. Everything worked as soon as it was connected to the board and there was no issue coding or testing all the functionality of it.</p>"},{"location":"EGR%20314%20Team%20Project/block-diagram/","title":"Block Diagram","text":""},{"location":"EGR%20314%20Team%20Project/block-diagram/#final-design","title":"Final Design","text":"<p>There were some initial features that ended up getting removed from the board and block diagram and let it focus on the needed parts. The sensor allows for users to see the amount of energy generated in simplistic terms while the UART allows for it to be passed along to the other boards for better display.</p>"},{"location":"EGR%20314%20Team%20Project/pic-table/","title":"PIC Table","text":"Pic Info Answer Model PIC18F26Q10 Product Page URL Product Datasheet URL(s) DataSheet Application Notes URL(s) HLVD DAC ADCC Coding Vendor link Digikey Example Code Code Unit cost $1.29 Absolute Maximum Current for entire IC 250mA Supply Voltage Range 1.8-5.5V Maximum GPIO current  (per pin) 50mA Supports External Interrupts? 3 Total Required Programming Hardware, Cost, URL Snap Works with MPLabX? Yes Works with Microchip Code Configurator? Yes Module # Available Needed Associated Pins (or * for any) GPIO 26 0 * ADC 16 1 2-18 UART 1 1 17-18/27-28 SPI 2 0 14-15/22-23 I2C 2 2 14-15/22-23 PWM 2 0 2-18 ICSP 1 1 3"}]}